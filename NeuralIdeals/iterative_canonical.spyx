def iterate_canonical(codes, ring):
	"""Given a set of code words, iteratively generates the canonical form ideal.

	ARGS:
		codes (list of strings): List of code words (e.g. ['010','100'])

	Returns:
		ideal (Ideal over Boolean Ring): Ideal generated by the canonical form.
	"""
	dimension = len(codes[0])
	x = ring.gens()

	# Compute canonical form using iterative algorithm
	init_code = codes[0]
	canonical = [(x[i] - int(init_code[i])) for i in range(dimension)]
	for i in range(1, len(codes)):
		current_code = codes[i]
		code_coordinate = [int(neuron) for neuron in current_code]
		factors = [(x[i] - code_coordinate[i]) for i in range(dimension)]
		generators = canonical
		M = []
		N = []
		L = []
		for generator in generators:
			if generator(code_coordinate) == 0:
				M.append(generator)
			else:
				N.append(generator)
		for generator in N:
			for factor in factors:
				goToNext = False
				g = generator * factor
				if generator.quo_rem(factor - 1)[1] == 0:
					continue
				for m_generator in M:
					if g.quo_rem(m_generator)[1] == 0:
						goToNext = True
						break
				if goToNext:
					continue
				L.append(g)
		canonical = M + L
	return ring.ideal(canonical)